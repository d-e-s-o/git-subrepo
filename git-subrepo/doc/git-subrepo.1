'\" t
.\"     Title: git-subrepo
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.0 <http://docbook.sf.net/>
.\"      Date: 09/13/2016
.\"    Manual: Git Manual
.\"    Source: Git
.\"  Language: English
.\"
.TH "GIT\-SUBREPO" "1" "09/13/2016" "Git" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-subrepo \- Subrepo management for git
.SH "SYNOPSIS"
.sp
.nf
\fIgit subrepo\fR [\-\-debug] [\-\-verbose]
\fIgit subrepo\fR import [\-\-edit] [\-\-force] <remote\-repository> <prefix> <commit>
\fIgit subrepo\fR delete [\-\-edit] <subrepo> <prefix>
\fIgit subrepo\fR reimport [\-\-branch=<branch>] <subrepo> <prefix>
\fIgit subrepo\fR tree
.fi
.sp
.SH "DESCRIPTION"
.sp
Imports a subrepo at a given prefix representing a given commit\&.
.sp
A subrepo allows you to keep another Git repository in a subdirectory of your current repository (the current repository is termed the "superrepo")\&. The other repository\(cqs source code is thereby embedded directly into this repository\&. This embedding makes subrepos preferable to submodules (see \fBgit-submodule\fR(1)) in many scenarios, as references to another repository cannot become invalid and all dependencies required in the superrepo are contained in it\&. In that sense, subrepos behave similar to subtrees (see \fBgit-subtree\fR(1)) when using the \-\-squash option to squash commits\&. The resulting commit, however, is not a merge in any way\&. Rather, the source code is imported as a "normal" commit, allowing for rebasing to take place, for instance\&.
.sp
Being part of the superrepo, clone and pull operations will involve any subrepos equally well, without any additional command invocations being required\&.
.SH "COMMANDS"
.PP
import
.RS 4
Import the given remote repository as a subrepo at the given prefix/path in the state as specified by the given commit\&. A new commit will be created in the superrepo that imports the source code\&. This command handles initial additions as well as incremental updates\&.
.RE
.PP
delete
.RS 4
Delete a subrepo previously imported at the given prefix\&. A new commit will be created to remove the code\&. The command takes care of resolving dependencies properly\&. That is, if two subrepos,
\fIa\fR
and
\fIb\fR, pull in a third one,
\fIc\fR, deletion of either
\fIa\fR
or
\fIb\fR
will not delete
\fIc\fR\&. Only once both subrepos
\fIa\fR
and
\fIb\fR
get removed, the last deletion will delete
\fIc\fR
as well\&.
.RE
.PP
reimport
.RS 4
Check whether current
\fIHEAD\fR
commit is a subrepo import and, if so, check whether a newer version of the imported commit can be found\&. If that is the case then reimport the remote repository at this new state\&. Matching of commits is performed based on the subject line of the commit description\&. This command is useful if imported remote repositories are rebased remotely\&. If the new state is to be imported not as a separate new commit but by amending the original import commit, this command takes care of importing the updated source code and adjusting the import commit message\&.
.RE
.PP
tree
.RS 4
Print out the subrepo dependency tree\&.
.RE
.SH "OPTIONS"
.PP
<remote\-repository>
.RS 4
Name of a remote repository to import in the form of a subrepo\&. The remote repository should be up\-to\-date such that the given commit is known locally\&. Please refer to
\fBgit-remote\fR(1)
for more details on remote repositories\&.
.RE
.PP
<subrepo>
.RS 4
Name of a subrepo to delete\&.
.RE
.PP
<prefix>
.RS 4
Relative path specifying where to import a subrepo or from where to delete it\&. On import, if code exists at the given prefix the differences to reach the desired state of the specified remote repository will be applied on top\&.
.RE
.PP
<commit>
.RS 4
Commit representing the state at which to import the given remote repository as a subrepo or to which to update the given subrepo to\&.
.RE
.PP
\-b, \-\-branch
.RS 4
When performing a reimport, matching commits (those with the same subject line as the imported commit) are searched across branches\&. That is, if there are multiple branches containing two equally worded commits with different SHA\-1 hashes, both will be found leading to the reimport to be ambiguous and, hence, aborted\&. To pick a commit from one of the branches this option followed by the branch name can be used\&.
.RE
.PP
\-d, \-\-debug
.RS 4
In the usual case git\-subrepo prints an error in case one of the executed git commands failed\&. When the \-d/\-\-debug flag is specified a backtrace will be printed in addition, potentially helping in debugging issues\&.
.RE
.PP
\-e, \-\-edit
.RS 4
By default git\-subrepo creates a commit message containing only the essential information for a particular commit\&. When this option is set the committer gets the chance to further edit the message\&.
.RE
.PP
\-f, \-\-force
.RS 4
As a sanity check, git\-subrepo verifies that a commit at which to import a given remote repository in the form of a subrepo does indeed belong to the remote repository specified\&. By using this option this check can be omitted and an import be forced\&.
.RE
.PP
\-v, \-\-verbose
.RS 4
In normal mode of operation git\-subrepo only prints messages in case of errors\&. For debugging purposes it might be beneficial to understand which commands are being executed and possibly replay them\&. By specifying this option all command invocations are reported to the user\&.
.RE
.SH "ROOT IMPORTS"
.sp
One advantage of subrepos over git\(cqs native submodules is the fact that the source code of the destination is embedded in the repository\&. The ability to have ordinary commits as opposed to merges as they are created when subtrees are in use is beneficial for rebasing over imports\&.
.sp
However, there is another feature that is unique to subrepos: the ability to import remote repositories directly into the root directory of the owning repository\&. Consider the following example:
.sp
.if n \{\
.RS 4
.\}
.nf
lib1
└── src
    └── lib1\&.py
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
lib2
└── src
    ├── lib1
    │\ \&\ \& └── src
    │\ \&\ \&     └── lib1\&.py
    └── lib2\&.py
.fi
.if n \{\
.RE
.\}
.sp
In this example we have two libraries, \fIlib1\fR and \fIlib2\fR\&. The latter depends on the former and, hence, imports it in the form of a subrepo\&. Now imagine an application, \fIapp\fR, using \fIlib2\fR\&. Once \fIapp\fR imports \fIlib2\fR it will implicitly import \fIlib1\fR as well (which is intended because it is an implicit dependency)\&.
.sp
.if n \{\
.RS 4
.\}
.nf
app
└── src
    ├── app\&.py
    └── lib2
        └── src
            ├── lib1
            │\ \&\ \& └── src
            │\ \&\ \&     └── lib1\&.py
            └── lib2\&.py
.fi
.if n \{\
.RE
.\}
.sp
With each import the level of nesting increases\&. Not only that, there is also a non\-uniformity in the directory layout: the source code in the owning repository is scattered counter\-intuitively over different directory levels, making it unnecessarily complex to find files\&. These problems are inherent the moment a repository starts having subdirectories\&. Such problems vanish when we restructure the repositories slightly and then import each directly into the owning repository\(cqs root directory, like so:
.sp
.if n \{\
.RS 4
.\}
.nf
lib1
└── lib1
    └── src
        └── lib1\&.py
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
lib2
├── lib1
│\ \&\ \& └── src
│\ \&\ \&     └── lib1\&.py
└── lib2
    └── src
        └── lib2\&.py
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
app
├── app
│\ \&\ \& └── src
│\ \&\ \&     └── app\&.py
├── lib1
│\ \&\ \& └── src
│\ \&\ \&     └── lib1\&.py
└── lib2
    └── src
        └── lib2\&.py
.fi
.if n \{\
.RE
.\}
.sp
Now an interesting question arises: since the root name space of the owning repository is shared, how are conflicts handled? The answer is simple: the last import will take precedence and applied are the changes from the current state of the owning repository to one where the subrepo to import is at the desired state\&.
.sp
This approach also solves another otherwise inherent problem, namely that if each subrepo pulls in its dependencies and two subrepos have the same dependency, the source code of this last dependency will reside in the repository at two places\&. From a logical point of view that is not necessary a problem\&. However, if one considers how the module systems of a variety of languages or their compilers/interpreters work it becomes apparent that one of the two is effectively dead code: the path to each subrepo has to be registered somewhere and this path will be searched for a match during compile or run time\&. Yet, only the first match that is found is used\&. This constraint in turn implies that both versions of the subrepo need to be "compatible" if they are to be used in a common application and we must be able to agree on using a single version\&.
.sp
Extending the example from before with a third library, \fIlib3\fR that depends on \fIlib1\fR as well, and making \fIapp\fR require \fIlib3\fR in addition to \fIlib2\fR, we get away with the following structure:
.sp
.if n \{\
.RS 4
.\}
.nf
app
├── app
│\ \&\ \& └── src
│\ \&\ \&     └── app\&.py
├── lib1
│\ \&\ \& └── src
│\ \&\ \&     └── lib1\&.py
├── lib2
│\ \&\ \& └── src
│\ \&\ \&     └── lib2\&.py
└── lib3
    └── src
        └── lib3\&.py
.fi
.if n \{\
.RE
.\}
.sp
Here, \fIlib1\fR is used by both \fIlib2\fR and \fIlib3\fR without the need to have a private copy in each\&. By design, it must be compatible with both\&.
.SH "EXAMPLES"
.sp
Assuming two repositories, \fIlib\fR and \fIapp\fR, that initially do not know each other but are located in the same directory, the following example illustrates how to import the former as a subrepo of the latter:
.sp
.if n \{\
.RS 4
.\}
.nf
$ cd app/
$ git remote add \-f lib \&.\&./lib/
.fi
.if n \{\
.RE
.\}
.sp
.sp
At this point \fIlib\fR is known to \fIapp\fR\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git subrepo import lib \&. master
.fi
.if n \{\
.RE
.\}
.sp
.sp
This command pulls in the contents of \fIlib\fR into the root directory of \fIapp\fR\&. A new commit will be created in \fIapp\fR that contains the changes that were made\&.
.sp
It is also possible to import the remote repository into any other directory, e\&.g\&., foo/:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git subrepo import lib foo/ master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Imagine that \fIlib\fR is now being updated\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ cd \&.\&./lib/
$ edit hello\&.c
$ git commit \-\-message \*(Aqupdate\*(Aq hello\&.c
.fi
.if n \{\
.RE
.\}
.sp
.sp
If we want to have these changes in \fIapp\fR we can update the subrepo:
.sp
.if n \{\
.RS 4
.\}
.nf
$ cd \&.\&./app/
$ git fetch lib
$ git subrepo import lib foo/ master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Now the subrepo \fIlib\fR in directory foo/ contains the most recent state of the original \fIlib\fR while the one imported into the root is still at the previous state\&.
.sp
The current state of imports can be visualized using the \fItree\fR command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git subrepo tree
├── foo/:lib at e6a02545285d187ae0f5c3211421f736a5092b65
└── \&./:lib at 8b3f9546e3dd4ea68f457cdc60859b2f4a342984
.fi
.if n \{\
.RE
.\}
.sp
.sp
The output illustrates that the remote repository \fIlib\fR has been imported at two prefixes, the root of the repository and the directory foo/\&. It also depicts the commit at which the import happened\&.
.sp
There are cases possible where the history of \fIlib\fR is (partly) rewritten\&. For instance, imagine that the commits have not been published anywhere because development is still going on in private and a bug was found and fixed\&. Updating the imports of \fIlib\fR in \fIapp\fR can happen using the reimport command\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git rebase \-\-interactive HEAD^^^ \-\-exec=\*(Aqgit subrepo reimport\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
.sp
During the development of our \fIapp\fR we may decide that we no longer need the version of \fIlib\fR imported below foo/\&. We could just remove the files by hand but that is cumbersome and would require manually taking care of handling dependencies correctly\&. Instead, we can delete the subrepo like so:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git subrepo delete lib foo/
.fi
.if n \{\
.RE
.\}
.sp
.SH "GIT"
.sp
To be used in conjunction with the \fBgit\fR(1) suite
